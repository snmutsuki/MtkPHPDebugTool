{"version":3,"sources":["logo.svg","FetchSider.js","SettingForm.js","MtkBreadcrumb.js","TextDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SubMenu","Menu","Sider","Layout","FetchSider","props","onCollapse","collapsed","console","log","setState","onItemClick","item","handleItemClick","key","state","menuContent","fetch","this","fetchUrl","then","response","text","data","JSON","parse","catch","error","menu","forEach","menuItem","subMenu","parseMenuContent","push","title","icon","type","name","disabled","Item","onClick","to","baseUrl","path","map","element","collapsible","className","theme","defaultSelectedKeys","mode","React","Component","SettingForm","fetchContent","content","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","method","headers","body","stringify","confirmDirty","autoCompleteResult","prevProps","Password","result","getFieldDecorator","formItem","label","helpMessage","labelName","rules","required","message","initialValue","value","getInputType","parseFormContent","labelCol","xs","span","sm","wrapperCol","onSubmit","offset","htmlType","MtkSettingForm","Form","create","MtkBreadcrumb","index","lastIndex","indexOf","substring","parsePath","style","TextDisplay","dangerouslySetInnerHTML","__html","Header","Content","Footer","baseFetchUrl","MtkManager","changeContent","minHeight","background","margin","render","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65680c70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport { Layout, Menu, Icon } from 'antd';\r\nimport { Link } from 'react-router-dom'\r\nconst { SubMenu } = Menu;\r\nconst { Sider } = Layout;\r\n\r\n\r\nclass FetchSider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { collapsed : false, menuContent : [] };\r\n    }\r\n\r\n    onCollapse = collapsed => {\r\n        console.log(collapsed);\r\n        this.setState({ collapsed });\r\n    };\r\n\r\n    onItemClick = item => {\r\n        this.props.handleItemClick(item.key);\r\n    }\r\n    /**\r\n     * 格式：\r\n     *  { name: \"setting\", key: \"/setting\", icon: \"pie-chart\", subMenu: false, path: \"/setting\" , disabled : false},\r\n        { name: \"Option 2\", key: \"/option2\", icon: \"desktop\", subMenu: false, path: \"/test2\", disabled : true},\r\n        {\r\n            name: \"User\", key: \"/user\", icon: \"user\", subMenu: [\r\n                { name: \"Tom\", key: \"/user/tom\", icon: false, subMenu: false, path: \"/test3\" },\r\n                { name: \"Bill\", key: \"/user/bill\", icon: false, subMenu: false, path: \"/test4\" }\r\n            ],disabled : true\r\n        }\r\n     */\r\n    componentDidMount() {\r\n        let menuContent = [];\r\n        fetch(this.props.fetchUrl).then(response => response.text())\r\n            .then(            \r\n                data => {\r\n                    menuContent = JSON.parse(data).data;\r\n                    this.setState(() => ({ menuContent : menuContent }));\r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    console.log(error);\r\n                    this.setState(() => ({ menuContent : []}));\r\n                }\r\n            \r\n            );\r\n    }\r\n\r\n    parseMenuContent(menuContent) {\r\n        let menu = [];\r\n        menuContent.forEach(menuItem => {\r\n            if (menuItem.subMenu) {\r\n                let subMenu = this.parseMenuContent(menuItem.subMenu);\r\n                menu.push(\r\n                    <SubMenu\r\n                        key={menuItem.key}\r\n                        title={\r\n                            <span>\r\n                                {menuItem.icon ? <Icon type={menuItem.icon} /> : false}\r\n                                <span>{menuItem.name}</span>\r\n                            </span>\r\n                        }\r\n                        disabled = {menuItem.disabled}\r\n                    >\r\n                        {subMenu}\r\n                    </SubMenu>\r\n                );\r\n            }else{\r\n                menu.push(\r\n                    <Menu.Item key={menuItem.key} onClick={this.onItemClick} disabled = {menuItem.disabled}>\r\n                        <Link to={this.props.baseUrl+menuItem.path}>\r\n                            {menuItem.icon ? <Icon type={menuItem.icon} /> : false}\r\n                            <span>{menuItem.name}</span>\r\n                        </Link> \r\n                    </Menu.Item>                   \r\n                )\r\n            }\r\n            \r\n        });\r\n        return menu;\r\n    }\r\n\r\n    render() {\r\n        const menu = this.parseMenuContent(this.state.menuContent).map(element => element);\r\n\r\n        return (\r\n            <Sider collapsible collapsed={this.state.collapsed} onCollapse={this.onCollapse}>\r\n                <div className={\"logo-collapsed-\"+this.state.collapsed} />\r\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                    {menu}\r\n                </Menu>               \r\n            </Sider>\r\n        )\r\n    }\r\n}\r\nexport default FetchSider;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'antd/dist/antd.css';\r\nimport './index.css';\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Icon,\r\n    Cascader,\r\n    Select,\r\n    Row,\r\n    Col,\r\n    Switch,\r\n    Checkbox,\r\n    Button,\r\n    AutoComplete,\r\n} from 'antd';\r\n\r\n\r\n// const { Option } = Select;\r\n// const AutoCompleteOption = AutoComplete.Option;\r\n// const residences = [\r\n//     {\r\n//         value: 'zhejiang',\r\n//         label: 'Zhejiang',\r\n//         children: [\r\n//             {\r\n//                 value: 'hangzhou',\r\n//                 label: 'Hangzhou',\r\n//                 children: [\r\n//                     {\r\n//                         value: 'xihu',\r\n//                         label: 'West Lake',\r\n//                     },\r\n//                 ],\r\n//             },\r\n//         ],\r\n//     },\r\n//     {\r\n//         value: 'jiangsu',\r\n//         label: 'Jiangsu',\r\n//         children: [\r\n//             {\r\n//                 value: 'nanjing',\r\n//                 label: 'Nanjing',\r\n//                 children: [\r\n//                     {\r\n//                         value: 'zhonghuamen',\r\n//                         label: 'Zhong Hua Men',\r\n//                     },\r\n//                 ],\r\n//             },\r\n//         ],\r\n//     },\r\n// ];\r\n\r\nclass SettingForm extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            confirmDirty: false,\r\n            autoCompleteResult: [],\r\n            content:[]\r\n        };\r\n\r\n    }\r\n    componentDidMount(){\r\n        this.fetchContent(this.props.fetchUrl);\r\n    }\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.fetchUrl == prevProps.fetchUrl) return;\r\n        this.fetchContent(this.props.fetchUrl);\r\n    }\r\n\r\n    fetchContent = fetchUrl => {\r\n        fetch(fetchUrl).then(response => response.text())\r\n            .then(            \r\n                data => {\r\n                    let content = JSON.parse(data).data;\r\n                    if(this.state.content != content){\r\n                        this.setState(() => ({ content : content }));\r\n                    }\r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    console.log(error);\r\n                    if(this.state.content != []){\r\n                        this.setState(() => ({ content : [] }));\r\n                    }\r\n                }\r\n            \r\n            );\r\n    }\r\n\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFieldsAndScroll((err, values) => {\r\n            if (!err) {\r\n                fetch(this.props.path,{\r\n                    method:'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json',\r\n                        'X-Requested-With': 'XMLHttpRequest'\r\n                    },\r\n                    body: JSON.stringify(values)\r\n                }).catch(err => console.log(err));\r\n                //console.log('Received values of form: ', values);\r\n            }\r\n        });\r\n    };\r\n\r\n    // handleConfirmBlur = e => {\r\n    //     const { value } = e.target;\r\n    //     this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    // };\r\n\r\n    // compareToFirstPassword = (rule, value, callback) => {\r\n    //     const { form } = this.props;\r\n    //     if (value && value !== form.getFieldValue('password')) {\r\n    //         callback('Two passwords that you enter is inconsistent!');\r\n    //     } else {\r\n    //         callback();\r\n    //     }\r\n    // };\r\n\r\n    // validateToNextPassword = (rule, value, callback) => {\r\n    //     const { form } = this.props;\r\n    //     if (value && this.state.confirmDirty) {\r\n    //         form.validateFields(['confirm'], { force: true });\r\n    //     }\r\n    //     callback();\r\n    // };\r\n\r\n    // handleWebsiteChange = value => {\r\n    //     let autoCompleteResult;\r\n    //     if (!value) {\r\n    //         autoCompleteResult = [];\r\n    //     } else {\r\n    //         autoCompleteResult = ['.com', '.org', '.net'].map(domain => `${value}${domain}`);\r\n    //     }\r\n    //     this.setState({ autoCompleteResult });\r\n    // };\r\n    getInputType(type) {\r\n        if (\"password\" == type) return (<Input.Password />)\r\n        if(\"switch\" == type) return (<Switch />)\r\n        return (<Input />)\r\n    }\r\n\r\n    parseFormContent(content) {\r\n        let result = [];\r\n        const { getFieldDecorator } = this.props.form;\r\n        content.forEach(formItem => {\r\n            result.push(\r\n                <Form.Item label={\r\n                    <span>\r\n                        {formItem.helpMessage ? (\r\n                            <span>{formItem.labelName}&nbsp;\r\n                                <Tooltip title={formItem.helpMessage}>\r\n                                    <Icon type=\"question-circle-o\" />\r\n                                </Tooltip>\r\n                            </span>\r\n                        ) : formItem.labelName}\r\n\r\n                    </span>\r\n                }>\r\n                    {getFieldDecorator(formItem.name, {\r\n                        rules: [\r\n                            {\r\n                                required: formItem.required,\r\n                                message: '这个值必须给定！',\r\n                            }\r\n                        ],\r\n                        initialValue: formItem.value\r\n                    })(this.getInputType(formItem.type))}\r\n                </Form.Item>\r\n            );\r\n        });\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        //const { autoCompleteResult } = this.state;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 },\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 10 },\r\n            },\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0,\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8,\r\n                },\r\n            },\r\n        };\r\n        const form = this.parseFormContent(this.state.content).map(element => element);\r\n        // const prefixSelector = getFieldDecorator('prefix', {\r\n        //     initialValue: '86',\r\n        // })(\r\n        //     <Select style={{ width: 70 }}>\r\n        //         <Option value=\"86\">+86</Option>\r\n        //         <Option value=\"87\">+87</Option>\r\n        //     </Select>,\r\n        // );\r\n\r\n        // const websiteOptions = autoCompleteResult.map(website => (\r\n        //     <AutoCompleteOption key={website}>{website}</AutoCompleteOption>\r\n        // ));\r\n\r\n        return (\r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit} className={this.props.className}>\r\n                {form}\r\n                {/* <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                    {getFieldDecorator('confirm', {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: 'Please confirm your password!',\r\n                            },\r\n                            {\r\n                                validator: this.compareToFirstPassword,\r\n                            },\r\n                        ],\r\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                </Form.Item> */}\r\n                {/* <Form.Item\r\n                    label={\r\n                        <span>\r\n                            Nickname&nbsp;\r\n                                <Tooltip title=\"What do you want others to call you?\">\r\n                                <Icon type=\"question-circle-o\" />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                >\r\n                    {getFieldDecorator('nickname', {\r\n                        rules: [{ required: true, message: 'Please input your nickname!', whitespace: true }],\r\n                    })(<Input />)}\r\n                </Form.Item> */}\r\n                {/* <Form.Item label=\"Habitual Residence\">\r\n                    {getFieldDecorator('residence', {\r\n                        initialValue: ['zhejiang', 'hangzhou', 'xihu'],\r\n                        rules: [\r\n                            { type: 'array', required: true, message: 'Please select your habitual residence!' },\r\n                        ],\r\n                    })(<Cascader options={residences} />)}\r\n                </Form.Item> */}\r\n                {/* <Form.Item label=\"Phone Number\">\r\n                    {getFieldDecorator('phone', {\r\n                        rules: [{ required: true, message: 'Please input your phone number!' }],\r\n                    })(<Input addonBefore={prefixSelector} style={{ width: '100%' }} />)}\r\n                </Form.Item> */}\r\n                {/* <Form.Item label=\"Website\">\r\n                    {getFieldDecorator('website', {\r\n                        rules: [{ required: true, message: 'Please input website!' }],\r\n                    })(\r\n                        <AutoComplete\r\n                            dataSource={websiteOptions}\r\n                            onChange={this.handleWebsiteChange}\r\n                            placeholder=\"website\"\r\n                        >\r\n                            <Input />\r\n                        </AutoComplete>,\r\n                    )}\r\n                </Form.Item> */}\r\n                {/* <Form.Item label=\"Captcha\" extra=\"We must make sure that your are a human.\">\r\n                    <Row gutter={8}>\r\n                        <Col span={12}>\r\n                            {getFieldDecorator('captcha', {\r\n                                rules: [{ required: true, message: 'Please input the captcha you got!' }],\r\n                            })(<Input />)}\r\n                        </Col>\r\n                        <Col span={12}>\r\n                            <Button>Get captcha</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form.Item> */}\r\n                {/* <Form.Item {...tailFormItemLayout}>\r\n                    {getFieldDecorator('agreement', {\r\n                        valuePropName: 'checked',\r\n                    })(\r\n                        <Checkbox>\r\n                            I have read the <a href=\"\">agreement</a>\r\n                        </Checkbox>,\r\n                    )}\r\n                </Form.Item> */}\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        确定\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst MtkSettingForm = Form.create({ name: 'register' })(SettingForm);\r\nexport default MtkSettingForm;","import React from 'react';\r\nimport {Breadcrumb} from 'antd';\r\n\r\nclass MtkBreadcrumb extends React.Component{\r\n    parsePath(path){\r\n        let result = [];\r\n        let index = 0;\r\n        let lastIndex = 0;\r\n        while((index = path.indexOf('/',lastIndex)) != -1){        \r\n            if(index != 0) result.push((<Breadcrumb.Item>{path.substring(lastIndex,index)}</Breadcrumb.Item>))\r\n            lastIndex = ++index;\r\n        }\r\n        result.push((<Breadcrumb.Item>{path.substring(lastIndex)}</Breadcrumb.Item>));\r\n        return result;\r\n    }\r\n\r\n    render(){\r\n        const item = this.parsePath(this.props.path).map(element => element);\r\n        return (\r\n            <Breadcrumb style={this.props.style}>\r\n               {item}\r\n            </Breadcrumb>\r\n        )\r\n    }\r\n}\r\nexport default MtkBreadcrumb;\r\n","import React from 'react'; \r\n\r\nclass TextDisplay extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {content:[]};\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.content){\r\n            this.setState(() => ({ content : this.props.content }));\r\n            return;\r\n        }\r\n        this.fetchContent(this.props.fetchUrl);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(!this.props.fetchUrl) return;\r\n        this.fetchContent(this.props.fetchUrl);\r\n    }\r\n\r\n    fetchContent = fetchUrl => {\r\n        fetch(fetchUrl).then(response => response.text())\r\n            .then(            \r\n                data => {\r\n                    let content = JSON.parse(data).data;\r\n                    if(this.state.content != content){\r\n                        this.setState(() => ({ content : content }));\r\n                    }\r\n                    \r\n                }\r\n            )\r\n            .catch(\r\n                error => {\r\n                    console.log(error);\r\n                    if(this.state.content != []){\r\n                        this.setState(() => ({ content : []}));\r\n                    }\r\n                }\r\n            \r\n            );\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className={this.props.className} dangerouslySetInnerHTML={{ __html: this.state.content }} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default TextDisplay;","import React from 'react';\nimport logo from './logo.svg';\n\nimport { Layout, Breadcrumb } from 'antd';\nimport FetchSider from './FetchSider';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { BrowserRouter as Router, Route ,Switch} from 'react-router-dom'\nimport MtkSettingForm from './SettingForm';\nimport MtkBreadcrumb from './MtkBreadcrumb';\nimport TextDisplay from './TextDisplay';\n\nconst { Header, Content, Footer } = Layout;\n\n\n//const baseUrl = \"/mtkDebug/static/mtkManager\";\nconst baseUrl = \"/mtkDebug/mtkManager\";\nconst baseFetchUrl = \"http://localhost:8088/mtkDebug/mtk.php\";\nclass MtkManager extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {content : [],path : \"/welcome\",fetchUrl:\"\"};\n  }\n\n\n  changeContent = path =>{\n    this.setState(() => ({ path:path , fetchUrl:baseFetchUrl+\"/MtkManager\"+path}));\n    //let content =[];\n\n    // fetch(baseFetchUrl+\"/MtkManager\"+path).then(response => response.text())\n    //   .then(\n    //       data => {\n    //           content= JSON.parse(data).data;\n    //           this.setState(() => ({ path:path,content : content }));\n    //       }\n    //   )\n    //   .catch(\n    //       error => {\n    //           console.log(error);\n    //           this.setState(() => ({ path:path,content : []}));\n    //       }\n    //   );\n\n  }\n  render() {\n    return (\n      <Layout style={{ minHeight: '100vh' }}>\n        <FetchSider baseUrl={baseUrl} handleItemClick={this.changeContent} fetchUrl={baseFetchUrl+\"/MtkManager/menu\"}/>\n        <Layout>\n          <Header style={{background:'#fff'}} >\n            <span>MTK</span>\n          </Header>\n          <Content style={{ margin: '0 16px' }}>\n            <MtkBreadcrumb style={{ margin: '16px 0' }} path={this.state.path} />   \n            <Switch>\n              <Route path={baseUrl+\"/setting\"} render={()=>(<MtkSettingForm path={baseFetchUrl+\"/Setting\"+this.state.path} fetchUrl={this.state.fetchUrl} className={\"content-border\"}/>)}/> \n              <Route path={baseUrl+\"/debug\"} render={() => (<TextDisplay className={\"content-border\"} fetchUrl={this.state.fetchUrl}/>)}/>\n              <Route path={\"*\"} render={()=> <TextDisplay className={\"content-border\"} content=\"Welcome to MTK\"/>}/>\n            </Switch>          \n          </Content>\n          <Footer style={{ textAlign: 'center' }}>Made by mutsuki</Footer>\n        </Layout>\n      </Layout>\n    )\n  }\n\n}\n\nfunction App() {\n  return (\n    <Router>\n      <MtkManager />         \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}